import router from '@system.router'
@Entry
@Component
struct Index {

  @State message: string = 'Hello World';
//  @State params: Object=router.getParams();
  /**
   * In low-code mode, do not add anything to the build function, as it will be
   * overwritten by the content generated by the .visual file in the build phase.
   */
  build() {
      Column({space : 6})
      {
        Flex({justifyContent : FlexAlign.SpaceBetween})
        {
          Image($r("app.media.icon")).width(40).height(40)
          Image($r("app.media.profile")).width(40).height(40)
        }
        Text("Discover our new items").fontSize(20).padding({ top :10 }).fontWeight(FontWeight.Bolder)
        Flex({justifyContent : FlexAlign.SpaceBetween})
        {
          TextArea({placeholder : "Search"}).width(250);
          Button({ type: ButtonType.Capsule }) {
            Navigator({ target: 'pages/filter', type: NavigationType.Push }) {

              Image($r("app.media.search")).width(30).height(30);

            }
          }
          .width(50)
          .height(40)
          .padding(0)
        }
        Flex({justifyContent:FlexAlign.SpaceBetween, direction:FlexDirection.Row})
        {
          Image($r("app.media.rshoes")).width(80).height(80)
          Column()
          {
            Text("Running unisex shoes").fontSize(15).fontWeight(FontWeight.Bolder).width(130);
            Text("Coming Soon...").fontSize(15).fontWeight(FontWeight.Bolder).fontColor(Color.Blue).width(130);
          }
          .alignItems(HorizontalAlign.Center)
          .alignSelf(ItemAlign.Center)
          Column()
          {
            Toggle({ type: ToggleType.Switch, isOn: false }).width(60).height(20);
            Text("Notify Me").fontSize(15).fontColor(Color.Gray);
          }
          .alignItems(HorizontalAlign.Center)
          .alignSelf(ItemAlign.Center)
        }
//        .border(BorderStyle.Dashed)
        .borderColor(Color.Gray)
        .borderWidth(2)
        .height(100)
        .width('100%')
        .borderRadius(20)
        .margin({top:10,bottom:10})
        .padding(5)
        Categories()
      }
      .padding(25)
      .alignItems(HorizontalAlign.Start)

  }
}
class Product{
  id :any;
  name :string;
  price :number;
  constructor(id :any,name:string,price:number) {
    this.id = id;
    this.name = name
    this.price = price;
  }

}
@Component
struct Categories
{
  private catScroller : Scroller=new Scroller();
  private itemScroller : Scroller=new Scroller();
  private indexes: Number[]=[0,1,2,3];
  private catNames : string[]=["Shoes","Jeans","Shirts","Trousers"];
  private colors : string[]=["#5050ff","#add8e6"];
  private Shoes:Product[]= [new Product(
                            $r("app.media.shoe1"),
                              "Nike running shoes",
                              4000
                            ),
  new Product(
  $r("app.media.shoe2"),
    "Nike sports shoes",
    4500
  ),
  new Product(
  $r("app.media.shoe3"),
    "Nike all-in-one shoes",
    5000
  )];
  private Jeans:Product[]= [new Product(
                            $r("app.media.jeans1"),
                              "Party wear jeans",
                              2000
                            ),
  new Product(
  $r("app.media.jeans2"),
    "Casual wear jeans",
    2500
  ),
  new Product(
  $r("app.media.jeans3"),
    "Women jeans",
    3000
  )];
  private Shirts:Product[]= [new Product(
                             $r("app.media.shirt1"),
                               "Plain shirt",
                               600
                             ),
  new Product(
  $r("app.media.shirt2"),
    "Premium shirt",
    2500
  ),
  new Product(
  $r("app.media.shirt3"),
    "Colour block shirt",
    800
  )];
  private Trousers:Product[]= [new Product(
                               $r("app.media.trousers1"),
                                 "Party Wear trousers",
                                 1400
                               ),
  new Product(
  $r("app.media.trousers2"),
    "Casual trousers",
    1500
  ),
  new Product(
  $r("app.media.trousers3"),
    "Old-Fashioned trousers",
    1800
  )];
  private items : Product[][]=[this.Shoes,this.Jeans,this.Shirts,this.Trousers];
//  private x : any=$r("app.media.jeans1")
  @State catStates: number[]=[0,0,0,0];
  build()
  {
    Column({space :6})
    {
      Text('Categories').fontSize(20).alignSelf(ItemAlign.Start).fontWeight(FontWeight.Bolder).margin({ top: 10, bottom: 10 })
      Scroll(this.catScroller)
      {
        Row({space : 5})
        {
          ForEach(this.indexes,(index:number)=>
          {
            Button(this.catNames[index]).backgroundColor(this.colors[this.catStates[index]]).fontColor(Color.Black).onClick(()=>
            {
              this.catStates[index]=1-this.catStates[index];
            });
          })

        }

      }
      .scrollable(ScrollDirection.Horizontal)
      .scrollBar(BarState.On)
      .margin({bottom: 10});
      Flex({justifyContent:FlexAlign.SpaceBetween})
      {
        Text("Popular items").fontSize(20).fontWeight(FontWeight.Bolder)
        Row({space : 3})
        {
          Text("View All").fontSize(15)
          Button(">").height(15).width(15).padding(0)
        }
      }
      .margin({bottom : 10})
      Grid(this.itemScroller)
      {
        ForEach(this.indexes,(index: number)=>
        {
          if(this.catStates[index]==0)
          {
            ForEach(this.items[index],(item: Product)=>
            {
              GridItem()
              {
                Navigator({ target: 'pages/itemDetail', type: NavigationType.Push })
                {
                  Column({space :2})
                  {
//                    Image($r("app.media.jeans1")).width(130).height(130)
                    Image(item.id).width(130).height(130)
                    Text(item.name).fontWeight(FontWeight.Bolder).fontSize(12)
                    Text("â‚¹ "+item.price).fontSize(14).fontWeight((FontWeight.Bolder))
                  }
                }.params({id:item.id,name:item.name,price:item.price})
              }
            })
          }
        })
      }
      .columnsTemplate("1fr 1fr")
      .columnsGap(10)
      .rowsGap(10)
      .height(260);
      Divider().strokeWidth(2).color(Color.Gray)
      Flex({justifyContent: FlexAlign.SpaceBetween})
      {
        Column()
        {
          Image($r("app.media.home")).width(30).height(30);
          Text("Home").fontSize(15);
        }

        Column()
        {
          Image($r("app.media.categories")).width(30).height(30);
          Text("Categories").fontSize(15);
        }

        Column()
        {
          Image($r("app.media.notifications")).width(30).height(30);
          Text("Notification").fontSize(15);
        }

        Column()
        {
          Image($r("app.media.cart")).width(30).height(30);
          Text("Cart").fontSize(15);
        }
      }
    }
  }
}